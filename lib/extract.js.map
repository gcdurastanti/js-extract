{"version":3,"sources":["../src/extract.js"],"names":["Object","defineProperty","String","prototype","value","character","currentIndex","index","slice","indexOf","findClosingBracketMatchIndex","str","pos","Error","depth","length","parseBlock","block","selectors","_","isEmpty","includes","replace","split","parts","indices","token","nextIndexOf","min","minBy","filter","val","openBracketIndex","topKey","substring","blockEnd","keys","subKeys","key","join","mapper","push","map","selector","flattenDeep","from","data","result","pick","where","extract","query","normalized"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport where from './where';\n\n// extend String so we can find the next index of a character\nObject.defineProperty(String.prototype, 'nextIndexOf', {\n  value(character, currentIndex) {\n    const index = this.slice(currentIndex).indexOf(character);\n    return index > 0 ? index + currentIndex : 0;\n  },\n});\n\nconst findClosingBracketMatchIndex = (str, pos) => {\n  if (str[pos] != '{') {\n    throw new Error(\"No '{' at index \" + pos);\n  }\n  let depth = 1;\n  let index = pos + 1;\n  const length = str.length;\n  while (index++ < length) {\n    switch (str[index]) {\n      case '{':\n        depth++;\n        break;\n      case '}':\n        if (--depth == 0) {\n          return index;\n        }\n        break;\n    }\n  }\n  return -1; // No matching closing bracket\n};\n\nconst parseBlock = block => {\n  let selectors = [];\n\n  if (_.isEmpty(block)) {\n    return selectors;\n  } else if (!block.includes(':')) {\n    return block.replace(/({|})/g, '').split(',');\n  }\n\n  const parts = block.split('');\n  const length = parts.length;\n  let index = -1;\n\n  while (index++ < length) {\n    const indices = [\n      { token: ':', index: block.nextIndexOf(':', index) },\n      { token: ',', index: block.nextIndexOf(',', index) },\n      { token: '{', index: block.nextIndexOf('{', index) },\n      { token: '}', index: block.nextIndexOf('}', index) },\n    ];\n    const min = _.minBy(indices.filter(val => val.index > 0), 'index');\n\n    if (min && min.token === ':') {\n      const openBracketIndex = min.index + 1;\n      const topKey = block.substring(index, min.index).replace(',', '');\n      const blockEnd = findClosingBracketMatchIndex(block, openBracketIndex);\n\n      const keys = block.substring(openBracketIndex + 1, blockEnd).split(',');\n\n      const subKeys = parseBlock(keys.filter(key => key.includes(':')).join(','));\n      const mapper = key => `${topKey}.${key}`;\n\n      selectors.push(...keys.map(mapper), ...subKeys.map(mapper));\n\n      // set loop index to end of this block since the recursion has handled it\n      index += blockEnd;\n    } else if (min && min.token === ',') {\n      const selector = block.substring(index, min.index);\n      selectors.push(selector);\n      index += min.index;\n    } else if (!min) {\n      selectors.push(block.substring(index, parts.length).replace(',', ''));\n      break;\n    }\n  }\n\n  return _.flattenDeep(selectors.filter(selector => !selector.includes(':')));\n};\n\nconst from = selectors => data => {\n  const result = _.pick(data, selectors);\n\n  return {\n    result,\n    where: where(result, selectors),\n  };\n};\n\nconst extract = query => {\n  const normalized = query.replace(/\\r?\\n|\\r|\\s/g, '');\n  const selectors = parseBlock(normalized);\n\n  return {\n    selectors,\n    from: from(selectors),\n  };\n};\n\nexport default extract;\n"],"file":"extract.js"}